import { useState } from 'react';
import ChatBot, { Button } from 'react-chatbotify';
import cookie from 'react-cookies';
import { findInvoiceByInvoiceNumber, findOrderByOrderNumber } from '../../configs/APIConfigs';
import { defaultImage, orderStatusName, orderTypesName } from '../../utils/Constatns';

const MyChatBot = () => {
   const [result, setResult] = useState(null);
   const [userSelection, setUserSelection] = useState('order');

   const input = {
      order: 'ƒê∆°n h√†ng',
      invoice: 'H√≥a ƒë∆°n',
   };

   const flow = {
      start: {
         message: () => {
            const seenBefore = cookie.load('user');
            if (seenBefore) {
               return `Ch√†o m·ª´ng tr·ªü l·∫°i ${seenBefore?.data?.username}! T√¥i c√≥ th·ªÉ gi√∫p g√¨ cho b·∫°n?`;
            }
            return 'Xin ch√†o üëã! T√¥i c√≥ th·ªÉ gi√∫p g√¨ cho b·∫°n?';
         },
         options: ['ƒê∆°n h√†ng', 'H√≥a ƒë∆°n'],
         chatDisabled: true,
         path: 'getInput',
      },
      getInput: {
         message: (params) => {
            const message = 'ƒê·ªÉ t√¨m m√£ ƒë∆°n h√†ng/h√≥a ƒë∆°n, vui l√≤ng v√†o trang c√° nh√¢n -> ƒë∆°n h√†ng';
            if (params.userInput === 'ƒê∆°n h√†ng') {
               setUserSelection('order');
               return `${message}\n\nVui l√≤ng cung c·∫•p m√£ ƒë∆°n h√†ng:`;
            } else if (params.userInput === 'H√≥a ƒë∆°n') {
               setUserSelection('invoice');
               return `${message}\n\nVui l√≤ng cung c·∫•p m√£ h√≥a ƒë∆°n:`;
            }
            return 'Vui l√≤ng cung c·∫•p th√¥ng tin c·∫ßn thi·∫øt:';
         },
         function: async (params) => {
            switch (userSelection) {
               case 'order':
                  const order = await findOrderByOrderNumber(params.userInput);
                  setResult(order);
                  break;
               case 'invoice':
                  const invoice = await findInvoiceByInvoiceNumber(params.userInput);
                  setResult(invoice);
                  break;
               default:
                  setResult(null);
            }
         },
         path: 'displayResult',
      },
      displayResult: {
         message: () => {
            if (typeof result === 'string') {
               return result;
            }

            if (!result) {
               return 'Kh√¥ng t√¨m th·∫•y th√¥ng tin. Vui l√≤ng th·ª≠ l·∫°i!';
            }

            return `Th√¥ng tin ${input[userSelection].toLowerCase()} c·ªßa b·∫°n:`;
         },
         component: () => {
            if (typeof result !== 'string') {
               switch (userSelection) {
                  case 'order':
                     return (
                        <div
                           style={{
                              marginTop: 10,
                              marginLeft: 20,
                              border: '1px solid #491d8d',
                              padding: 10,
                              borderRadius: 5,
                              maxWidth: 300,
                           }}
                        >
                           <p>M√£ v·∫≠n chuy·ªÉn: {result.trackingNumber}</p>
                           <p>T√™n ng∆∞·ªùi v·∫≠n chuy·ªÉn: {result.shipperName}</p>
                           <p>Lo·∫°i: {orderTypesName[result.orderType]}</p>
                           <p>
                              Ph√≠ v·∫≠n chuy·ªÉn:{' '}
                              {result.shippingCost.toLocaleString('vi-VN', {
                                 style: 'currency',
                                 currency: 'VND',
                              })}
                           </p>
                           <p>V·ªã tr√≠ hi·ªán t·∫°i: {result.currentLocation}</p>
                           <p>Tr·∫°ng th√°i ƒë∆°n h√†ng: {orderStatusName[result.orderStatus]}</p>
                           <p>Ng√†y giao h√†ng: {result.scheduledDate}</p>
                           <p>Ng√†y ƒë·∫∑t h√†ng: {result.orderDate}</p>
                        </div>
                     );
                  case 'invoice':
                     return (
                        <div
                           style={{
                              marginTop: 10,
                              marginLeft: 20,
                              border: '1px solid #491d8d',
                              padding: 10,
                              borderRadius: 5,
                              maxWidth: 300,
                           }}
                        >
                           <p>S·ªë h√≥a ƒë∆°n: {result.invoiceNumber}</p>
                           <p>T·ªïng ti·ªÅn: {result.totalAmount}</p>
                           <p>Ng√†y l·∫≠p h√≥a ƒë∆°n: {result.invoiceDate}</p>
                           <p>Tr·∫°ng th√°i thanh to√°n: {result.paid ? 'ƒê√£ thanh to√°n' : 'Ch∆∞a thanh to√°n'}</p>
                        </div>
                     );
                  default:
                     return null;
               }
            }
         },
         options: ['T·∫°o m·ªõi'],
         chatDisabled: true,
         path: 'start',
      },
   };

   const settings = {
      tooltip: {
         mode: 'NEVER',
      },
      general: {
         primaryColor: '#009970',
         secondaryColor: '#009970',
         showFooter: false,
      },
      chatHistory: {
         viewChatHistoryButtonText: 'T·∫£i tin nh·∫Øn tr∆∞·ªõc ƒë√≥ ‚ü≥',
         chatHistoryLineBreakText: '----- Tin nh·∫Øn tr∆∞·ªõc ƒë√≥ -----',
      },
      chatInput: {
         enabledPlaceholderText: 'Nh·∫≠p tin nh·∫Øn c·ªßa b·∫°n...',
         buttons: [Button.SEND_MESSAGE_BUTTON],
      },
      chatWindow: {
         messagePromptText: 'Tin nh·∫Øn m·ªõi ‚Üì',
      },
      header: {
         title: (
            <div
               style={{ cursor: 'pointer', margin: 0, fontSize: 20, fontWeight: 'bold' }}
               onClick={() => window.open('https://github.com/HiepThanhTran/Website-SCMS')}
            >
               SCMS Harmony
            </div>
         ),
         showAvatar: true,
         avatar: defaultImage.USER_AVATAR,
         buttons: [Button.CLOSE_CHAT_BUTTON],
      },
      footer: {
         text: null,
         buttons: [Button.FILE_ATTACHMENT_BUTTON, Button.EMOJI_PICKER_BUTTON],
      },
   };

   return <ChatBot flow={flow} settings={settings} />;
};

export default MyChatBot;
